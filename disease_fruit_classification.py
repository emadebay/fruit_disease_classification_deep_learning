# -*- coding: utf-8 -*-
"""Disease_fruit_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lZO4pm-Ods4mVhjnTwKyydQOQTpUv6sU
"""

from google.colab import drive
drive.mount('/content/drive')

# import tensorflow as tf
# gpu_avail = tf.config.list_physical_devices('GPU')
# print(len(gpu_avail))
# for gpu in gpu_avail:
#   print(gpu.name)

import os
import cv2
import numpy as np

def read_images_from_folder(folder_path: str)-> np.ndarray:
    target_size = (224,224)
    images = []
    # Iterate through all files in the folder
    for filename in os.listdir(folder_path):
        # Check if the file is an image
        if filename.endswith('.jpg') or filename.endswith('.png') or filename.endswith('.jpeg'):
            # Read the image
            image_path = os.path.join(folder_path, filename)
            image = cv2.imread(image_path)
            # Preprocess the image if needed (e.g., resize, normalize)
            resized_image = cv2.resize(image, target_size)
            # Add the preprocessed image to the list
            images.append(resized_image)
    # Convert the list of images to a NumPy array
    images_array = np.array(images)
    return images_array

#alternaria disease pictures
alternaria_disease_folder_path = '/content/drive/MyDrive/cs_557/MangoFruitDDS/SenMangoFruitDDS_original/Alternaria'
alternaria_images= read_images_from_folder(alternaria_disease_folder_path)
alternaria_images_label = np.full(170,0)
print('Shape of images array:', alternaria_images.shape)

# Anthracnose disease
anthracnose_disease_folder_path = '/content/drive/MyDrive/cs_557/MangoFruitDDS/SenMangoFruitDDS_original/Anthracnose'
anthracnose_images = read_images_from_folder(anthracnose_disease_folder_path)
anthracnose_images_label = np.full(132,1)
print('Shape of images array:', anthracnose_images.shape)

# #Black Mould fruits
black_mould_folder_path = '/content/drive/MyDrive/cs_557/MangoFruitDDS/SenMangoFruitDDS_original/Black Mould Rot'
black_mould_fruits_images = read_images_from_folder(black_mould_folder_path)
black_mould_fruits_images_label = np.full(216,2)
print('Shape of images array:', black_mould_fruits_images.shape)

# #healthy fruits
healthy_fruits_folder_path = '/content/drive/MyDrive/cs_557/MangoFruitDDS/SenMangoFruitDDS_original/Healthy'
healthy_fruit_images = read_images_from_folder(healthy_fruits_folder_path)
healthy_fruit_images_label = np.full(208,3)
print('Shape of images array:', healthy_fruit_images.shape)

# #Stem and rot fruits
stem_and_rots_folder_path = '/content/drive/MyDrive/cs_557/MangoFruitDDS/SenMangoFruitDDS_original/Stem end Rot'
stem_and_rot_images = read_images_from_folder(stem_and_rots_folder_path)
stem_and_rot_images_label = np.full(166,4)
print('Shape of images array:', stem_and_rot_images.shape)

# Append arrays 2 through 5 to array1 along the first axis (rows)
images = np.concatenate((alternaria_images, anthracnose_images, black_mould_fruits_images, healthy_fruit_images, healthy_fruit_images), axis=0)
labels = np.concatenate((alternaria_images_label, anthracnose_images_label, black_mould_fruits_images_label, healthy_fruit_images_label, stem_and_rot_images_label), axis=0)

# Append arrays 2 through 5 to array1 along the first axis (rows)
images = np.concatenate((alternaria_images, anthracnose_images, black_mould_fruits_images, healthy_fruit_images, stem_and_rot_images), axis=0)
labels = np.concatenate((alternaria_images_label, anthracnose_images_label, black_mould_fruits_images_label, healthy_fruit_images_label, stem_and_rot_images_label), axis=0)

from sklearn.model_selection import train_test_split

# Split the images and labels into training and testing sets
train_images, test_images, train_labels, test_labels = train_test_split(images, labels, test_size=0.2, random_state=42)

import numpy as np
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from keras.optimizers import Adam

class ImageClassifierCNN:
    def __init__(self):
        self.model = None

    def build_model(self, input_shape, num_classes):
        self.model = Sequential([
            Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=input_shape),
            MaxPooling2D(pool_size=(2, 2)),
            Conv2D(64, kernel_size=(3, 3), activation='relu'),
            MaxPooling2D(pool_size=(2, 2)),
            Flatten(),
            Dense(128, activation='relu'),
            Dense(num_classes, activation='softmax')
        ])
        self.model.compile(optimizer='adam',
                           loss='sparse_categorical_crossentropy',
                           metrics=['accuracy'])

    def train(self, train_images, train_labels, epochs=10):
        self.model.fit(train_images, train_labels, epochs=epochs)

    def evaluate(self, test_images, test_labels):
        test_loss, test_acc = self.model.evaluate(test_images, test_labels)
        print('Test accuracy:', test_acc)

    def predict(self, unlabeled_example):
        unlabeled_example = np.expand_dims(unlabeled_example, axis=0)
        predictions = self.model.predict(unlabeled_example)
        predicted_class_index = np.argmax(predictions)
        probability_distribution = predictions[0]
        return predicted_class_index, probability_distribution

# Example usage:
# Initialize the image classifier
classifier = ImageClassifierCNN()



# Build the model
input_shape = train_images.shape[1:]
num_classes = 5  # Example number of classes, adjust according to your data
classifier.build_model(input_shape, num_classes)

# Train the model
classifier.train(train_images, train_labels)

# Evaluate the model
classifier.evaluate(test_images, test_labels)

# Example of predicting an unlabeled example
unlabeled_example = images[1]  # Your unlabeled example array
predicted_class, probability_distribution = classifier.predict(unlabeled_example)
print("Predicted class:", predicted_class)
print("Probability distribution:", probability_distribution)